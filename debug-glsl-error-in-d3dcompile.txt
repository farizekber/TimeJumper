#line 195 ""
#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
#endif

// compile directives
// #pragma vertex vert_surf
// #pragma fragment frag_surf
// #pragma exclude_renderers nomrt
// #pragma multi_compile_prepassfinal
#include "HLSLSupport.cginc"
#include "UnityShaderVariables.cginc"
// Surface shader code generated based on:
// vertex modifier: 'vert'
// writes to per-pixel normal: no
// writes to emission: no
// needs world space reflection vector: no
// needs world space normal vector: no
// needs screen space position: no
// needs world space position: no
// needs view direction: no
// needs world space view direction: no
// needs world space position for lighting: YES
// needs world space view direction for lighting: YES
// needs world space view direction for lightmaps: no
// needs vertex color: no
// needs VFACE: no
// passes tangent-to-world matrix to pixel shader: no
// reads from normal: YES
// 1 texcoords actually used
//   float2 _MainTex1
#define UNITY_PASS_DEFERRED
#include "UnityCG.cginc"
#include "Lighting.cginc"
#include "UnityPBSLighting.cginc"

#define INTERNAL_DATA
#define WorldReflectionVector(data,normal) data.worldRefl
#define WorldNormalVector(data,normal) normal

// Original surface shader snippet:
#include "HLSLSupport.cginc"
#include "UnityShaderVariables.cginc"
#line 20 ""
#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
#endif

//// #pragma surface surf Standard vertex:vert
#include "UnityCG.cginc"

	sampler2D _MainTex1;
	float4 _MainTex1_ST;
	sampler2D _MainTex2;
	float4 _MainTex2_ST;
	sampler2D _MainTex3;
	float4 _MainTex3_ST;
	sampler2D _MainTex4;
	float4 _MainTex4_ST;
	sampler2D _MainTex5;
	float4 _MainTex5_ST;
	sampler2D _MainTex6;
	float4 _MainTex6_ST;

	float _TickCount;
	float _Horizontal;

	struct Input {
		float2 uv_MainTex1;
		float2 uv_MainTex2;
		float2 uv_MainTex3;
		float2 uv_MainTex4;
		float2 uv_MainTex5;
		float2 uv_MainTex6;
		float4 vertex;
	}; 
	
	struct appdata_full2 {
		float4 vertex : POSITION;
		float4 tangent : TANGENT;
		float3 normal : NORMAL;
		float4 texcoord : TEXCOORD0;
		float4 texcoord1 : TEXCOORD1;
		half4 texcoord2 : TEXCOORD2;
		half4 texcoord3 : TEXCOORD3;
		half4 texcoord4 : TEXCOORD4;
		half4 texcoord5 : TEXCOORD5;
		fixed4 color : COLOR;
	};

	void vert(inout appdata_full2 v, out Input o)
	{
		o.uv_MainTex1 = TRANSFORM_TEX(v.texcoord,  _MainTex1);
		o.uv_MainTex2 = TRANSFORM_TEX(v.texcoord1, _MainTex2);
		o.uv_MainTex3 = TRANSFORM_TEX(v.texcoord2, _MainTex3);
		o.uv_MainTex4 = TRANSFORM_TEX(v.texcoord3, _MainTex4);
		o.uv_MainTex5 = TRANSFORM_TEX(v.texcoord4, _MainTex5);
		o.uv_MainTex6 = TRANSFORM_TEX(v.texcoord5, _MainTex6);
		o.vertex = v.vertex;
	}

	void surf(Input IN, inout SurfaceOutputStandard o) {
		fixed2 scrollUV1 = IN.uv_MainTex1;

		if (_Horizontal < 0.0)
		{
			scrollUV1 += fixed2(_TickCount, 0);
		}
		else
		{
			scrollUV1 += fixed2(0, _TickCount);
		}

		fixed4 c1 = tex2D(_MainTex1, scrollUV1);
		fixed4 c2 = tex2D(_MainTex2, scrollUV1);
		fixed4 c3 = tex2D(_MainTex3, scrollUV1);
		fixed4 c4 = tex2D(_MainTex4, scrollUV1);
		fixed4 c5 = tex2D(_MainTex5, scrollUV1);
		fixed4 c6 = tex2D(_MainTex6, scrollUV1);

		if (c1.a > 0.8 && IN.vertex.y >= 0.3)
		{
			o.Albedo = c1.rgb;
		}
		else
		{
			o.Albedo = c6.rgb;
		}
		o.Alpha = 1;
	}
	

// vertex-to-fragment interpolation data
struct v2f_surf {
  float4 pos : SV_POSITION;
  float2 pack0 : TEXCOORD0; // _MainTex1
  half3 worldNormal : TEXCOORD1;
  float3 worldPos : TEXCOORD2;
  float4 custompack0 : TEXCOORD3; // vertex
#ifndef DIRLIGHTMAP_OFF
  half3 viewDir : TEXCOORD4;
#endif
  float4 lmap : TEXCOORD5;
#ifdef LIGHTMAP_OFF
  #if UNITY_SHOULD_SAMPLE_SH
    half3 sh : TEXCOORD6; // SH
  #endif
#else
  #ifdef DIRLIGHTMAP_OFF
    float4 lmapFadePos : TEXCOORD7;
  #endif
#endif
};
float4 _MainTex1_ST;

// vertex shader
v2f_surf vert_surf (appdata_full2 v) {
  v2f_surf o;
  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
  Input customInputData;
  vert (v, customInputData);
  o.custompack0.xyzw = customInputData.vertex;
  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);
  o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex1);
  float3 worldPos = mul(_Object2World, v.vertex).xyz;
  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
  o.worldPos = worldPos;
  o.worldNormal = worldNormal;
  float3 viewDirForLight = UnityWorldSpaceViewDir(worldPos);
  #ifndef DIRLIGHTMAP_OFF
  o.viewDir = viewDirForLight;
  #endif
#ifndef DYNAMICLIGHTMAP_OFF
  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
#else
  o.lmap.zw = 0;
#endif
#ifndef LIGHTMAP_OFF
  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
  #ifdef DIRLIGHTMAP_OFF
    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;
    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);
  #endif
#else
  o.lmap.xy = 0;
  #if UNITY_SHOULD_SAMPLE_SH
    #if UNITY_SAMPLE_FULL_SH_PER_PIXEL
      o.sh = 0;
    #elif (SHADER_TARGET < 30)
      o.sh = ShadeSH9 (float4(worldNormal,1.0));
    #else
      o.sh = ShadeSH3Order (half4(worldNormal, 1.0));
    #endif
  #endif
#endif
  return o;
}
#ifdef LIGHTMAP_ON
float4 unity_LightmapFade;
#endif
fixed4 unity_Ambient;

// fragment shader
void frag_surf (v2f_surf IN,
    out half4 outDiffuse : SV_Target0,
    out half4 outSpecSmoothness : SV_Target1,
    out half4 outNormal : SV_Target2,
    out half4 outEmission : SV_Target3) {
  // prepare and unpack data
  Input surfIN;
  UNITY_INITIALIZE_OUTPUT(Input,surfIN);
  surfIN.uv_MainTex1 = IN.pack0.xy;
  surfIN.vertex = IN.custompack0.xyzw;
  float3 worldPos = IN.worldPos;
  #ifndef USING_DIRECTIONAL_LIGHT
    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
  #else
    fixed3 lightDir = _WorldSpaceLightPos0.xyz;
  #endif
  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
  #ifdef UNITY_COMPILER_HLSL
  SurfaceOutputStandard o = (SurfaceOutputStandard)0;
  #else
  SurfaceOutputStandard o;
  #endif
  o.Albedo = 0.0;
  o.Emission = 0.0;
  o.Alpha = 0.0;
  o.Occlusion = 1.0;
  fixed3 normalWorldVertex = fixed3(0,0,1);
  o.Normal = IN.worldNormal;
  normalWorldVertex = IN.worldNormal;

  // call surface function
  surf (surfIN, o);
fixed3 originalNormal = o.Normal;
  half atten = 1;

  // Setup lighting environment
  UnityGI gi;
  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
  gi.indirect.diffuse = 0;
  gi.indirect.specular = 0;
  gi.light.color = 0;
  gi.light.dir = half3(0,1,0);
  gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);
  // Call GI (lightmaps/SH/reflections) lighting function
  UnityGIInput giInput;
  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
  giInput.light = gi.light;
  giInput.worldPos = worldPos;
  giInput.worldViewDir = worldViewDir;
  giInput.atten = atten;
  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
    giInput.lightmapUV = IN.lmap;
  #else
    giInput.lightmapUV = 0.0;
  #endif
  #if UNITY_SHOULD_SAMPLE_SH
    giInput.ambient = IN.sh;
  #else
    giInput.ambient.rgb = 0.0;
  #endif
  giInput.probeHDR[0] = unity_SpecCube0_HDR;
  giInput.probeHDR[1] = unity_SpecCube1_HDR;
  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION
    giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
  #endif
  #if UNITY_SPECCUBE_BOX_PROJECTION
    giInput.boxMax[0] = unity_SpecCube0_BoxMax;
    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
    giInput.boxMax[1] = unity_SpecCube1_BoxMax;
    giInput.boxMin[1] = unity_SpecCube1_BoxMin;
    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
  #endif
  LightingStandard_GI(o, giInput, gi);

  // call lighting function to output g-buffer
  outEmission = LightingStandard_Deferred (o, worldViewDir, gi, outDiffuse, outSpecSmoothness, outNormal);
  UNITY_OPAQUE_ALPHA(outDiffuse.a);
  #ifndef UNITY_HDR_ON
  outEmission.rgb = exp2(-outEmission.rgb);
  #endif
}

